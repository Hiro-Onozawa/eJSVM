\inst lessthan (v1, v2)

\prologue \{
#define dst regbase[r0]
\}

\epilogue \{
#undef dst
\}

\when v1:fixnum && v2:fixnum \{
  dst = true_false((int64_t) v1 < (int64_t) v2);
\}

\when (v1:fixnum && v2:flonum) || (v1:flonum && v2:fixnum) || (v1:flonum && v2:flonum) \{
  double x1 = to_double(context, v1);
  double x2 = to_double(context, v2);
  dst = true_false(x1 < x2);
\}

\when v1:string && v2:string \{
  dst = true_false(strcmp(string_to_cstr(v1), string_to_cstr(v2)) < 0);
\}

\when (v1:special && v2:special) || (v1:special && v2:string) || (v1:string && v2:special) \{
  v1 = to_number(context, v1);
  v2 = to_number(context, v2);
  goto lessthan_HEAD;
\}

\when (v1:string || v1:special) && (v2:fixnum || v2:flonum) \{
  v1 = to_number(context, v1);
  goto lessthan_HEAD;
\}

\when (v1:fixnum || v1:flonum) && (v2:string || v2:special) \{
  v2 = to_number(context, v2);
  goto lessthan_HEAD;
\}

\when (v1:regexp || v1:number_object || v1:boolean_object || v1:builtin || v1:string_object || v1:simple_object || v1:array || v1:iterator || v1:function) && (v2:fixnum || v2:flonum || v2:string || v2:special) \{
  v1 = object_to_primitive(context, v1, HINT_NUMBER);
  goto lessthan_HEAD;
\}

\when (v1:fixnum || v1:flonum || v1:string || v1:special) && (v2:regexp || v2:number_object || v2:boolean_object || v2:builtin || v2:string_object || v2:simple_object || v2:array || v2:iterator || v2:function) \{
  v2 = object_to_primitive(context, v2, HINT_NUMBER);
  goto lessthan_HEAD;
\}

\otherwise \{
  v1 = object_to_primitive(context, v1, HINT_NUMBER);
  v2 = object_to_primitive(context, v2, HINT_NUMBER);
  goto lessthan_HEAD;
\}


